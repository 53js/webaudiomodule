

/*******************************************************************************
**************************** File generated by *********************************
********************************************************************************
 ./build-plug.py -i VintageAmp_p1.sch VintageAmp_p2.sch VintageAmp_p3.sch VintageAmp_powerAmp.sch VintageAmp_cab_p1.sch VintageAmp_cab_p2.sch -T --table_neg 2 4 -o 10 -x 15.0 -f --switch 1=Bright -r 1=0.333 3=0.666 4=0.666 5=0.666 6=0.666 --fixedrate 96000 --build --name VintageAmp
*******************************************************************************/

// generated automatically
// DO NOT MODIFY!
declare id "vintageamp";
declare name "VintageAmp";
declare category "Extern";
declare shortname "VintageAmp";
declare description "VintageAmp";
declare samplerate "96000";

import("stdfaust.lib");

/*******************************************************************************
  * 1-dimensional function table for linear interpolation
*******************************************************************************/

//-- Rdtable from waveform
rtable(table, r) = (table, int(r)):rdtable;

//-- Copy the sign of x to f
ccopysign(f, x) = ma.fabs(f) * sign(x);

//-- Get sign of value x
sign(x) = x<0, 1, -1 : select2;

//-- Check if value x is negative
fsignbit(x) = x<0;

//-- Get fractal part of value n
fractal(n) = n - int(n);

//-- Interpolate value between i and i+1 in table with fractal coefficient f.
interpolation(table, size, f, i) = select2(i<0,select2(i>size-2,
    rtable(table, i)*(1-f) + rtable(table,i+1)*f, rtable(table, size-1)),
    rtable(table, 0));

//-- Linear interpolation for value x in rdtable
circuit_response(table, low, high, step, size, x) =
    interpolation(table, size, fractal(linindex(step, x)),
    int(linindex(step, x))), x : ccopysign;

//-- Calculate linear table index for value x
linindex(step, x) = ma.fabs(x) * step;



/*******************************************************************************
  * vintageamp_p1 generated by dkbuiler from VintageAmp_p1.sch
*******************************************************************************/

p1 = pre : fi.iir((b0/a0,b1/a0,b2/a0),(a1/a0,a2/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    b0 = fs*(4.16735243056623e-10*fs - 1.34532561213629e-5) - 0.00381962735513334;

    b1 = -8.33470486113245e-10*pow(fs,2) - 0.00763925471026669;

    b2 = fs*(4.16735243056623e-10*fs + 1.34532561213629e-5) - 0.00381962735513334;

    a0 = fs*(4.16735243056623e-10*fs + 8.26427569712678e-7) + 0.000173476651332639;

    a1 = -8.33470486113245e-10*pow(fs,2) + 0.000346953302665278;

    a2 = fs*(4.16735243056623e-10*fs - 8.26427569712678e-7) + 0.000173476651332639;
};

/****************************************************************************************
* vintageamp_p2_table generated by DK/circ_table_gen.py -- do not modify manually
****************************************************************************************/

 // variables used
 // --sig_max  15.000000
 // --table_div  24.187463
 // --table_op  10.000000

vintageamp_p2_clip = circuit_response(vintageamp_p2_table, low, high, step, size) with{

    low = 0;
    high =-0.833333;
    step =132.667;
    size =200;

    vintageamp_p2_table = waveform {
    0.000000000000,-0.010712151353,-0.020788209399,-0.030288758114,-0.039268727972,
    -0.047777878957,-0.055861253976,-0.063559601086,-0.070909764322,-0.077945043733,
    -0.084695525822,-0.091188385904,-0.097448164100,-0.103497016752,-0.109354945070,
    -0.115040002789,-0.120568484534,-0.125955096528,-0.131213111156,-0.136354506821,
    -0.141390094406,-0.146329631577,-0.151181926031,-0.155954928737,-0.160655818100,
    -0.165291075921,-0.169866555921,-0.174387545552,-0.178858821741,-0.183284701150,
    -0.187669085492,-0.192015502374,-0.196327142115,-0.200606890924,-0.204857360800,
    -0.209080916478,-0.213279699707,-0.217455651124,-0.221610529963,-0.225745931815,
    -0.229863304625,-0.233963963109,-0.238049101740,-0.242119806446,-0.246177065159,
    -0.250221777310,-0.254254762385,-0.258276767646,-0.262288475074,-0.266290507633,
    -0.270283434918,-0.274267778242,-0.278244015219,-0.282212583903,-0.286173886510,
    -0.290128292786,-0.294076143032,-0.298017750841,-0.301953405562,-0.305883374529,
    -0.309807905062,-0.313727226289,-0.317641550772,-0.321551075990,-0.325455985674,
    -0.329356451010,-0.333252631727,-0.337144677089,-0.341032726776,-0.344916911697,
    -0.348797354719,-0.352674171321,-0.356547470200,-0.360417353807,-0.364283918841,
    -0.368147256694,-0.372007453859,-0.375864592290,-0.379718749745,-0.383570000084,
    -0.387418413547,-0.391264057005,-0.395106994195,-0.398947285921,-0.402784990254,
    -0.406620162699,-0.410452856364,-0.414283122097,-0.418111008630,-0.421936562697,
    -0.425759829147,-0.429580851053,-0.433399669805,-0.437216325201,-0.441030855527,
    -0.444843297634,-0.448653687011,-0.452462057847,-0.456268443094,-0.460072874521,
    -0.463875382772,-0.467675997409,-0.471474746966,-0.475271658982,-0.479066760051,
    -0.482860075855,-0.486651631202,-0.490441450058,-0.494229555581,-0.498015970149,
    -0.501800715391,-0.505583812212,-0.509365280819,-0.513145140748,-0.516923410882,
    -0.520700109479,-0.524475254190,-0.528248862079,-0.532020949643,-0.535791532830,
    -0.539560627060,-0.543328247235,-0.547094407762,-0.550859122566,-0.554622405105,
    -0.558384268384,-0.562144724971,-0.565903787008,-0.569661466225,-0.573417773953,
    -0.577172721136,-0.580926318342,-0.584678575774,-0.588429503283,-0.592179110376,
    -0.595927406228,-0.599674399689,-0.603420099300,-0.607164513294,-0.610907649610,
    -0.614649515903,-0.618390119547,-0.622129467649,-0.625867567053,-0.629604424348,
    -0.633340045879,-0.637074437750,-0.640807605833,-0.644539555775,-0.648270293005,
    -0.651999822738,-0.655728149984,-0.659455279554,-0.663181216063,-0.666905963940,
    -0.670629527429,-0.674351910599,-0.678073117346,-0.681793151398,-0.685512016324,
    -0.689229715533,-0.692946252284,-0.696661629687,-0.700375850709,-0.704088918178,
    -0.707800834787,-0.711511603098,-0.715221225547,-0.718929704448,-0.722637041994,
    -0.726343240263,-0.730048301221,-0.733752226727,-0.737455018533,-0.741156678289,
    -0.744857207547,-0.748556607765,-0.752254880305,-0.755952026441,-0.759648047360,
    -0.763342944165,-0.767036717877,-0.770729369438,-0.774420899714,-0.778111309497,
    -0.781800599506,-0.785488770393,-0.789175822741,-0.792861757070,-0.796546573836,
    -0.800230273435,-0.803912856202,-0.807594322420,-0.811274672313,-0.814953906054,
    -0.818632023765,-0.822309025516,-0.825984911333,-0.829659681193,-0.833333335030
    };
};


/****************************************************************************************
* vintageamp_p2_neg_table generated by DK/circ_table_gen.py -- do not modify manually
****************************************************************************************/

 // variables used
 // --sig_max  -15.000000
 // --table_div  24.187463
 // --table_op  10.000000

vintageamp_p2_neg_clip = circuit_response(vintageamp_p2_neg_table, low, high, step, size) with{

    low = 0;
    high =0.550206;
    step =132.667;
    size =200;

    vintageamp_p2_neg_table = waveform {
    0.000000000000,0.010689788950,0.020704100806,0.030110387046,0.038969146539,
    0.047334652345,0.055255601546,0.062775696308,0.069934163529,0.076766219616,
    0.083303486286,0.089574362602,0.095604357934,0.101416390011,0.107031051779,
    0.112466850390,0.117740421276,0.122866719950,0.127859193885,0.132729936577,
    0.137489825657,0.142148646743,0.146715204506,0.151197422304,0.155602431561,
    0.159936651967,0.164205863459,0.168415270810,0.172569561627,0.176672958401,
    0.180729265255,0.184741909912,0.188713981390,0.192648263856,0.196547267032,
    0.200413253506,0.204248263277,0.208054135791,0.211832529755,0.215584940928,
    0.219312718116,0.223017077541,0.226699115755,0.230359821245,0.234000084864,
    0.237620709205,0.241222417027,0.244805858825,0.248371619639,0.251920225171,
    0.255452147280,0.258967808926,0.262467588611,0.265951824368,0.269420817349,
    0.272874835046,0.276314114187,0.279738863334,0.283149265224,0.286545478856,
    0.289927641386,0.293295869804,0.296650262457,0.299990900404,0.303317848633,
    0.306631157153,0.309930861966,0.313216985943,0.316489539595,0.319748521778,
    0.322993920300,0.326225712477,0.329443865619,0.332648337459,0.335839076535,
    0.339016022523,0.342179106530,0.345328251350,0.348463371679,0.351584374310,
    0.354691158288,0.357783615049,0.360861628529,0.363925075253,0.366973824408,
    0.370007737893,0.373026670354,0.376030469211,0.379018974658,0.381992019666,
    0.384949429965,0.387891024015,0.390816612979,0.393726000673,0.396618983521,
    0.399495350497,0.402354883062,0.405197355103,0.408022532855,0.410830174836,
    0.413620031765,0.416391846489,0.419145353907,0.421880280892,0.424596346217,
    0.427293260482,0.429970726049,0.432628436977,0.435266078966,0.437883329304,
    0.440479856835,0.443055321921,0.445609376432,0.448141663738,0.450651818724,
    0.453139467821,0.455604229059,0.458045712136,0.460463518524,0.462857241591,
    0.465226466759,0.467570771697,0.469889726546,0.472182894186,0.474449830551,
    0.476690084982,0.478903200634,0.481088714942,0.483246160139,0.485375063837,
    0.487474949674,0.489545338033,0.491585746830,0.493595692384,0.495574690361,
    0.497522256806,0.499437909259,0.501321167961,0.503171557148,0.504988606437,
    0.506771852302,0.508520839644,0.510235123443,0.511914270507,0.513557861287,
    0.515165491787,0.516736775524,0.518271345564,0.519768856600,0.521228987068,
    0.522651441289,0.524035951619,0.525382280592,0.526690223025,0.527959608090,
    0.529190301302,0.530382206421,0.531535267232,0.532649469193,0.533724840907,
    0.534761455413,0.535759431267,0.536718933388,0.537640173654,0.538523411235,
    0.539368952636,0.540177151460,0.540948407866,0.541683167728,0.542381921495,
    0.543045202761,0.543673586549,0.544267687332,0.544828156796,0.545355681386,
    0.545850979647,0.546314799384,0.546747914694,0.547151122873,0.547525241250,
    0.547871103981,0.548189558816,0.548481463903,0.548747684625,0.548989090523,
    0.549206552318,0.549400939057,0.549573115407,0.549723939108,0.549854258601,
    0.549964910839,0.550056719295,0.550130492159,0.550187020738,0.550227078049,
    0.550251417605,0.550260772389,0.550255854006,0.550237352009,0.550205933387
    };
};

/*******************************************************************************
  * vintageamp_p2 generated by dkbuiler from VintageAmp_p2.sch
*******************************************************************************/

p2 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0),(a1/a0,a2/a0,a3/a0)) : vintageamp_p2clip with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    Volume = vslider("Volume[name:Volume][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(3) : si.smooth(s);

    b0 = Volume*(Volume*pow(fs,2)*(1.12794330933527e-13*fs + 2.55306317187702e-10) + fs*(fs*(-1.12794330933527e-13*fs - 3.11703482654466e-10) - 1.27653158593851e-7));

    b1 = Volume*(Volume*pow(fs,2)*(-3.3838299280058e-13*fs - 2.55306317187702e-10) + fs*(fs*(3.3838299280058e-13*fs + 3.11703482654466e-10) - 1.27653158593851e-7));

    b2 = Volume*(Volume*pow(fs,2)*(3.3838299280058e-13*fs - 2.55306317187702e-10) + fs*(fs*(-3.3838299280058e-13*fs + 3.11703482654466e-10) + 1.27653158593851e-7));

    b3 = Volume*(Volume*pow(fs,2)*(-1.12794330933527e-13*fs + 2.55306317187702e-10) + fs*(fs*(1.12794330933527e-13*fs - 3.11703482654466e-10) + 1.27653158593851e-7));

    a0 = Volume*(Volume*fs*(fs*(-3.18232353484157e-14*fs - 7.27329344390611e-11) - 1.58911559362935e-9) + fs*(fs*(3.18232353484157e-14*fs + 3.88784287492572e-11) + 8.42231264623558e-10)) + fs*(4.97661233640118e-11*fs + 5.40406043934383e-8) + 1.16799996131758e-6;

    a1 = Volume*(Volume*fs*(fs*(9.54697060452472e-14*fs + 7.27329344390611e-11) - 1.58911559362935e-9) + fs*(fs*(-9.54697060452472e-14*fs - 3.88784287492572e-11) + 8.42231264623558e-10)) + fs*(-4.97661233640118e-11*fs + 5.40406043934383e-8) + 3.50399988395273e-6;

    a2 = Volume*(Volume*fs*(fs*(-9.54697060452472e-14*fs + 7.27329344390611e-11) + 1.58911559362935e-9) + fs*(fs*(9.54697060452472e-14*fs - 3.88784287492572e-11) - 8.42231264623558e-10)) + fs*(-4.97661233640118e-11*fs - 5.40406043934383e-8) + 3.50399988395273e-6;

    a3 = Volume*(Volume*fs*(fs*(3.18232353484157e-14*fs - 7.27329344390611e-11) + 1.58911559362935e-9) + fs*(fs*(-3.18232353484157e-14*fs + 3.88784287492572e-11) - 8.42231264623558e-10)) + fs*(4.97661233640118e-11*fs - 5.40406043934383e-8) + 1.16799996131758e-6;
};

vintageamp_p2clip = _<: ba.if(fsignbit(_), vintageamp_p2_neg_clip, vintageamp_p2_clip) :>_ ; 

/*******************************************************************************
  * vintageamp_p3 generated by dkbuiler from VintageAmp_p3.sch
*******************************************************************************/

p3 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0),(a1/a0,a2/a0,a3/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    Master = vslider("Master[name:Master][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(3) : si.smooth(s);

    Bass = vslider("Bass[name:Bass][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(7) : si.smooth(s);


    Treble = vslider("Treble[name:Treble][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : si.smooth(s);


    Middle = vslider("Middle[name:Middle][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : si.smooth(s);

    b0 = Master*(Bass*(Middle*pow(fs,2)*(-3.48166185515821e-13*fs - 1.49526650953366e-9) + fs*(-4.06590047763715e-10*fs - 1.54469680736949e-6)) + Middle*(Middle*pow(fs,2)*(7.65965608134806e-15*fs + 3.28958632097406e-11) + fs*(fs*(-7.65965608134806e-15*fs - 3.97766178642034e-11) - 3.3272508000304e-8)) + Treble*(-4.54129807194549e-13*Bass*pow(fs,3) + 9.99085575828008e-15*Middle*pow(fs,3) + fs*(fs*(-9.99085575828008e-15*fs - 2.06422639633886e-11) - 7.10821761824676e-9)) + fs*(-8.94498105080173e-12*fs - 3.39833297621287e-8));

    b1 = Master*(Bass*(Middle*pow(fs,2)*(1.04449855654746e-12*fs + 1.49526650953366e-9) + fs*(4.06590047763715e-10*fs - 1.54469680736949e-6)) + Middle*(Middle*pow(fs,2)*(-2.29789682440442e-14*fs - 3.28958632097406e-11) + fs*(fs*(2.29789682440442e-14*fs + 3.97766178642034e-11) - 3.3272508000304e-8)) + Treble*(1.36238942158365e-12*Bass*pow(fs,3) - 2.99725672748402e-14*Middle*pow(fs,3) + fs*(fs*(2.99725672748402e-14*fs + 2.06422639633886e-11) - 7.10821761824676e-9)) + fs*(8.94498105080173e-12*fs - 3.39833297621287e-8));

    b2 = Master*(Bass*(Middle*pow(fs,2)*(-1.04449855654746e-12*fs + 1.49526650953366e-9) + fs*(4.06590047763715e-10*fs + 1.54469680736949e-6)) + Middle*(Middle*pow(fs,2)*(2.29789682440442e-14*fs - 3.28958632097406e-11) + fs*(fs*(-2.29789682440442e-14*fs + 3.97766178642034e-11) + 3.3272508000304e-8)) + Treble*(-1.36238942158365e-12*Bass*pow(fs,3) + 2.99725672748402e-14*Middle*pow(fs,3) + fs*(fs*(-2.99725672748402e-14*fs + 2.06422639633886e-11) + 7.10821761824676e-9)) + fs*(8.94498105080173e-12*fs + 3.39833297621287e-8));

    b3 = Master*(Bass*(Middle*pow(fs,2)*(3.48166185515821e-13*fs - 1.49526650953366e-9) + fs*(-4.06590047763715e-10*fs + 1.54469680736949e-6)) + Middle*(Middle*pow(fs,2)*(-7.65965608134806e-15*fs + 3.28958632097406e-11) + fs*(fs*(7.65965608134806e-15*fs - 3.97766178642034e-11) + 3.3272508000304e-8)) + Treble*(4.54129807194549e-13*Bass*pow(fs,3) - 9.99085575828008e-15*Middle*pow(fs,3) + fs*(fs*(9.99085575828008e-15*fs - 2.06422639633886e-11) + 7.10821761824676e-9)) + fs*(-8.94498105080173e-12*fs + 3.39833297621287e-8));

    a0 = Bass*(Middle*fs*(fs*(8.4448446570892e-15*fs + 3.65575592641919e-11) + 7.84234481690603e-10) + fs*(fs*(1.08432864509182e-14*fs + 6.24344932141459e-11) + 3.89557496727746e-8) + 8.1015958852335e-7) + Middle*(Middle*fs*(fs*(-1.85786582455962e-16*fs - 8.04266303812222e-13) - 1.72531585971933e-11) + fs*(fs*(-5.27657194642384e-17*fs - 1.85435971576751e-13) + 8.01487640287796e-10)) + Treble*(Bass*(Middle*pow(fs,2)*(1.33441449601444e-15*fs + 7.42921009195142e-12) + fs*(fs*(2.38552301920201e-15*fs + 1.26485665547481e-11) + 7.6748038139994e-9)) + Middle*(Middle*pow(fs,2)*(-2.93571189123176e-17*fs - 1.63442622022931e-13) + fs*(fs*(-2.31243875101266e-17*fs - 5.41706378172345e-14) + 1.72531585971933e-10)) + Treble*(Bass*(-1.56989940707581e-15*Middle*pow(fs,3) + pow(fs,2)*(-2.38152207460354e-15*fs - 1.62179690813617e-12)) + Middle*(3.45377869556678e-17*Middle*pow(fs,3) + pow(fs,2)*(1.785569868561e-17*fs - 3.56795319789957e-14)) + fs*(fs*(-5.23934856412778e-17*fs - 1.43930535370065e-13) - 3.68590206394583e-11)) + fs*(fs*(5.24815064224442e-17*fs + 3.86701328713641e-13) + 7.29224792105746e-10) + 1.78235109475137e-7) + fs*(fs*(2.38552301920201e-16*fs + 1.86643550757113e-12) + 3.40420425733631e-9) + 8.27983099470864e-7;

    a1 = Bass*(Middle*fs*(fs*(-2.53345339712676e-14*fs - 3.65575592641919e-11) + 7.84234481690603e-10) + fs*(fs*(-3.25298593527547e-14*fs - 6.24344932141459e-11) + 3.89557496727746e-8) + 2.43047876557005e-6) + Middle*(Middle*fs*(fs*(5.57359747367887e-16*fs + 8.04266303812222e-13) - 1.72531585971933e-11) + fs*(fs*(1.58297158392715e-16*fs + 1.85435971576751e-13) + 8.01487640287796e-10)) + Treble*(Bass*(Middle*pow(fs,2)*(-4.00324348804331e-15*fs - 7.42921009195142e-12) + fs*(fs*(-7.15656905760603e-15*fs - 1.26485665547481e-11) + 7.6748038139994e-9)) + Middle*(Middle*pow(fs,2)*(8.80713567369529e-17*fs + 1.63442622022931e-13) + fs*(fs*(6.93731625303797e-17*fs + 5.41706378172345e-14) + 1.72531585971933e-10)) + Treble*(Bass*(4.70969822122743e-15*Middle*pow(fs,3) + pow(fs,2)*(7.14456622381061e-15*fs + 1.62179690813617e-12)) + Middle*(-1.03613360867003e-16*Middle*pow(fs,3) + pow(fs,2)*(-5.35670960568299e-17*fs + 3.56795319789957e-14)) + fs*(fs*(1.57180456923833e-16*fs + 1.43930535370065e-13) - 3.68590206394583e-11)) + fs*(fs*(-1.57444519267333e-16*fs - 3.86701328713641e-13) + 7.29224792105746e-10) + 5.34705328425411e-7) + fs*(fs*(-7.15656905760603e-16*fs - 1.86643550757113e-12) + 3.40420425733631e-9) + 2.48394929841259e-6;

    a2 = Bass*(Middle*fs*(fs*(2.53345339712676e-14*fs - 3.65575592641919e-11) - 7.84234481690603e-10) + fs*(fs*(3.25298593527547e-14*fs - 6.24344932141459e-11) - 3.89557496727746e-8) + 2.43047876557005e-6) + Middle*(Middle*fs*(fs*(-5.57359747367887e-16*fs + 8.04266303812222e-13) + 1.72531585971933e-11) + fs*(fs*(-1.58297158392715e-16*fs + 1.85435971576751e-13) - 8.01487640287796e-10)) + Treble*(Bass*(Middle*pow(fs,2)*(4.00324348804331e-15*fs - 7.42921009195142e-12) + fs*(fs*(7.15656905760603e-15*fs - 1.26485665547481e-11) - 7.6748038139994e-9)) + Middle*(Middle*pow(fs,2)*(-8.80713567369529e-17*fs + 1.63442622022931e-13) + fs*(fs*(-6.93731625303797e-17*fs + 5.41706378172345e-14) - 1.72531585971933e-10)) + Treble*(Bass*(-4.70969822122743e-15*Middle*pow(fs,3) + pow(fs,2)*(-7.14456622381061e-15*fs + 1.62179690813617e-12)) + Middle*(1.03613360867003e-16*Middle*pow(fs,3) + pow(fs,2)*(5.35670960568299e-17*fs + 3.56795319789957e-14)) + fs*(fs*(-1.57180456923833e-16*fs + 1.43930535370065e-13) + 3.68590206394583e-11)) + fs*(fs*(1.57444519267333e-16*fs - 3.86701328713641e-13) - 7.29224792105746e-10) + 5.34705328425411e-7) + fs*(fs*(7.15656905760603e-16*fs - 1.86643550757113e-12) - 3.40420425733631e-9) + 2.48394929841259e-6;

    a3 = Bass*(Middle*fs*(fs*(-8.4448446570892e-15*fs + 3.65575592641919e-11) - 7.84234481690603e-10) + fs*(fs*(-1.08432864509182e-14*fs + 6.24344932141459e-11) - 3.89557496727746e-8) + 8.1015958852335e-7) + Middle*(Middle*fs*(fs*(1.85786582455962e-16*fs - 8.04266303812222e-13) + 1.72531585971933e-11) + fs*(fs*(5.27657194642384e-17*fs - 1.85435971576751e-13) - 8.01487640287796e-10)) + Treble*(Bass*(Middle*pow(fs,2)*(-1.33441449601444e-15*fs + 7.42921009195142e-12) + fs*(fs*(-2.38552301920201e-15*fs + 1.26485665547481e-11) - 7.6748038139994e-9)) + Middle*(Middle*pow(fs,2)*(2.93571189123176e-17*fs - 1.63442622022931e-13) + fs*(fs*(2.31243875101266e-17*fs - 5.41706378172345e-14) - 1.72531585971933e-10)) + Treble*(Bass*(1.56989940707581e-15*Middle*pow(fs,3) + pow(fs,2)*(2.38152207460354e-15*fs - 1.62179690813617e-12)) + Middle*(-3.45377869556678e-17*Middle*pow(fs,3) + pow(fs,2)*(-1.785569868561e-17*fs - 3.56795319789957e-14)) + fs*(fs*(5.23934856412778e-17*fs - 1.43930535370065e-13) + 3.68590206394583e-11)) + fs*(fs*(-5.24815064224442e-17*fs + 3.86701328713641e-13) - 7.29224792105746e-10) + 1.78235109475137e-7) + fs*(fs*(-2.38552301920201e-16*fs + 1.86643550757113e-12) - 3.40420425733631e-9) + 8.27983099470864e-7;
};

/****************************************************************************************
* vintageamp_poweramp_table generated by DK/circ_table_gen.py -- do not modify manually
****************************************************************************************/

 // variables used
 // --sig_max  1.400000
 // --table_div  1.302340
 // --table_op  1.000000

vintageamp_poweramp_clip = circuit_response(vintageamp_poweramp_table, low, high, step, size) with{

    low = 0;
    high =0.833333;
    step =142.143;
    size =200;

    vintageamp_poweramp_table = waveform {
    0.000000000000,0.012883808701,0.025605024818,0.038165405305,0.050566691242,
    0.062810607341,0.074898862180,0.086833147944,0.098615141004,0.110246501424,
    0.121728873958,0.133063886930,0.144253152886,0.155298268910,0.166200816381,
    0.176962361209,0.187584453534,0.198068628889,0.208416406785,0.218629291956,
    0.228708774034,0.238656327660,0.248473412686,0.258161474020,0.267721942065,
    0.277156232794,0.286465747578,0.295651873376,0.304715983326,0.313659435798,
    0.322483575670,0.331189733884,0.339779227468,0.348253359616,0.356613420573,
    0.364860686109,0.372996419746,0.381021871112,0.388938277061,0.396746861304,
    0.404448834462,0.412045394830,0.419537727667,0.426927006043,0.434214390244,
    0.441401028550,0.448488056790,0.455476598844,0.462367766606,0.469162660062,
    0.475862367518,0.482467965459,0.488980519056,0.495401082044,0.501730696642,
    0.507970394031,0.514121194294,0.520184106581,0.526160128923,0.532050248821,
    0.537855443168,0.543576677930,0.549214909049,0.554771081816,0.560246131441,
    0.565640983031,0.570956551400,0.576193741776,0.581353449262,0.586436559402,
    0.591443947988,0.596376481428,0.601235016512,0.606020400837,0.610733472642,
    0.615375061144,0.619945986401,0.624447059483,0.628879082788,0.633242849754,
    0.637539145206,0.641768745416,0.645932418034,0.650030922453,0.654065009670,
    0.658035422476,0.661942895450,0.665788155212,0.669571920324,0.673294901558,
    0.676957801769,0.680561316177,0.684106132310,0.687592930161,0.691022382242,
    0.694395153736,0.697711902391,0.700973278777,0.704179926321,0.707332481346,
    0.710431573164,0.713477824182,0.716471849914,0.719414259118,0.722305653827,
    0.725146629473,0.727937774866,0.730679672372,0.733372897906,0.736018021040,
    0.738615605039,0.741166207010,0.743670377851,0.746128662387,0.748541599443,
    0.750909721911,0.753233556737,0.755513625099,0.757750442408,0.759944518348,
    0.762096357011,0.764206456870,0.766275310919,0.768303406699,0.770291226346,
    0.772239246654,0.774147939158,0.776017770187,0.777849200873,0.779642687269,
    0.781398680367,0.783117626162,0.784799965728,0.786446135222,0.788056566015,
    0.789631684644,0.791171912966,0.792677668128,0.794149362674,0.795587404546,
    0.796992197202,0.798364139588,0.799703626245,0.801011047336,0.802286788679,
    0.803531231830,0.804744754086,0.805927728569,0.807080524260,0.808203506032,
    0.809297034720,0.810361467124,0.811397156089,0.812404450554,0.813383695567,
    0.814335232331,0.815259398256,0.816156527007,0.817026948540,0.817870989126,
    0.818688971396,0.819481214424,0.820248033689,0.820989741192,0.821706645429,
    0.822399051473,0.823067260998,0.823711572303,0.824332280370,0.824929676890,
    0.825504050299,0.826055685815,0.826584865463,0.827091868143,0.827576969599,
    0.828040442538,0.828482556604,0.828903578417,0.829303771623,0.829683396923,
    0.830042712098,0.830381972048,0.830701428829,0.831001331644,0.831281926942,
    0.831543458394,0.831786166937,0.832010290817,0.832216065603,0.832403724219,
    0.832573496989,0.832725611639,0.832860293340,0.832977764746,0.833078245993,
    0.833161954756,0.833229106265,0.833279913317,0.833314586328,0.833333333333
    };
};


/****************************************************************************************
* vintageamp_poweramp_neg_table generated by DK/circ_table_gen.py -- do not modify manually
****************************************************************************************/

 // variables used
 // --sig_max  -1.400000
 // --table_div  1.302340
 // --table_op  1.000000

vintageamp_poweramp_neg_clip = circuit_response(vintageamp_poweramp_neg_table, low, high, step, size) with{

    low = 0;
    high =-0.825821;
    step =142.143;
    size =200;

    vintageamp_poweramp_neg_table = waveform {
    0.000000000000,-0.012884027465,-0.025605868502,-0.038167234659,-0.050569822621,
    -0.062815313655,-0.074905374675,-0.086841657528,-0.098625799953,-0.110259424323,
    -0.121744138085,-0.133081535170,-0.144273193995,-0.155320678619,-0.166225538844,
    -0.176989310604,-0.187613513996,-0.198099656007,-0.208449229702,-0.218663712917,
    -0.228744570146,-0.238693251742,-0.248511194142,-0.258199819939,-0.267760537846,
    -0.277194743382,-0.286503817951,-0.295689129547,-0.304752033026,-0.313693869751,
    -0.322515967754,-0.331219642007,-0.339806194622,-0.348276914406,-0.356633077528,
    -0.364875947316,-0.373006774435,-0.381026796905,-0.388937240546,-0.396739318063,
    -0.404434230874,-0.412023167490,-0.419507304461,-0.426887806448,-0.434165826093,
    -0.441342504438,-0.448418970598,-0.455396342033,-0.462275725030,-0.469058214116,
    -0.475744892770,-0.482336832950,-0.488835095845,-0.495240731398,-0.501554778680,
    -0.507778265999,-0.513912210818,-0.519957620137,-0.525915490270,-0.531786807173,
    -0.537572546535,-0.543273673655,-0.548891143710,-0.554425901948,-0.559878883556,
    -0.565251013833,-0.570543208426,-0.575756373204,-0.580891404421,-0.585949189030,
    -0.590930604324,-0.595836518501,-0.600667790404,-0.605425269796,-0.610109797418,
    -0.614722205046,-0.619263315583,-0.623733943145,-0.628134893205,-0.632466962560,
    -0.636730939566,-0.640927604090,-0.645057727665,-0.649122073585,-0.653121396947,
    -0.657056444740,-0.660927955929,-0.664736661574,-0.668483284864,-0.672168541210,
    -0.675793138316,-0.679357776289,-0.682863147702,-0.686309937590,-0.689698823717,
    -0.693030476463,-0.696305558982,-0.699524727280,-0.702688630254,-0.705797909822,
    -0.708853200912,-0.711855131665,-0.714804323301,-0.717701390429,-0.720546940933,
    -0.723341576089,-0.726085890766,-0.728780473231,-0.731425905481,-0.734022763144,
    -0.736571615598,-0.739073026048,-0.741527551568,-0.743935743159,-0.746298145879,
    -0.748615298788,-0.750887735127,-0.753115982305,-0.755300561995,-0.757441990189,
    -0.759540777231,-0.761597427911,-0.763612441534,-0.765586311921,-0.767519527511,
    -0.769412571417,-0.771265921478,-0.773080050269,-0.774855425262,-0.776592508770,
    -0.778291758062,-0.779953625392,-0.781578558080,-0.783166998530,-0.784719384315,
    -0.786236148195,-0.787717718197,-0.789164517631,-0.790576965201,-0.791955474990,
    -0.793300456540,-0.794612314890,-0.795891450621,-0.797138259952,-0.798353134691,
    -0.799536462373,-0.800688626258,-0.801810005387,-0.802900974628,-0.803961904719,
    -0.804993162313,-0.805995110044,-0.806968106499,-0.807912506361,-0.808828660358,
    -0.809716915379,-0.810577614460,-0.811411096867,-0.812217698104,-0.812997749969,
    -0.813751580585,-0.814479514455,-0.815181872495,-0.815858972052,-0.816511126972,
    -0.817138647617,-0.817741840908,-0.818321010369,-0.818876456154,-0.819408475082,
    -0.819917360682,-0.820403403230,-0.820866889761,-0.821308104137,-0.821727327039,
    -0.822124836054,-0.822500905668,-0.822855807303,-0.823189809370,-0.823503177281,
    -0.823796173504,-0.824069057551,-0.824322086072,-0.824555512818,-0.824769588752,
    -0.824964561981,-0.825140677875,-0.825298179057,-0.825437305413,-0.825558294158,
    -0.825661379873,-0.825746794467,-0.825814767287,-0.825865525085,-0.825899292085,
    -0.825916289987,-0.825916737991,-0.825900852863,-0.825868848902,-0.825820938011
    };
};

/*******************************************************************************
  * vintageamp_poweramp generated by dkbuiler from VintageAmp_powerAmp.sch
*******************************************************************************/

p4 =  vintageamp_powerampclip with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    Presense = vslider("Presense[name:Presense][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(7) : si.smooth(s);

    b0 = Presense*pow(fs,2)*(fs*(fs*(1.82660654997593e-23*fs + 1.84854090977517e-21) + 1.03587747290622e-22) + 3.80914573518139e-23) + fs*(fs*(fs*(fs*(7.29642109487735e-26*fs + 3.66059678029873e-21) + 3.69708558020002e-19) + 2.07175494581244e-20) + 7.61829147036278e-21);

    b1 = Presense*pow(fs,2)*(fs*(fs*(-9.13303274987963e-23*fs - 5.5456227293255e-21) - 1.03587747290622e-22) + 3.80914573518139e-23) + fs*(fs*(fs*(fs*(-3.64821054743868e-25*fs - 1.09817903408962e-20) - 3.69708558020002e-19) + 2.07175494581244e-20) + 2.28548744110883e-20);

    b2 = Presense*pow(fs,2)*(fs*(fs*(1.82660654997593e-22*fs + 3.69708181955034e-21) - 2.07175494581244e-22) - 7.61829147036278e-23) + fs*(fs*(fs*(fs*(7.29642109487735e-25*fs + 7.32119356059746e-21) - 7.39417116040004e-19) - 4.14350989162489e-20) + 1.52365829407256e-20);

    b3 = Presense*pow(fs,2)*(fs*(fs*(-1.82660654997593e-22*fs + 3.69708181955034e-21) + 2.07175494581244e-22) - 7.61829147036278e-23) + fs*(fs*(fs*(fs*(-7.29642109487735e-25*fs + 7.32119356059746e-21) + 7.39417116040004e-19) - 4.14350989162489e-20) - 1.52365829407256e-20);

    b4 = Presense*pow(fs,2)*(fs*(fs*(9.13303274987963e-23*fs - 5.5456227293255e-21) + 1.03587747290622e-22) + 3.80914573518139e-23) + fs*(fs*(fs*(fs*(3.64821054743868e-25*fs - 1.09817903408962e-20) + 3.69708558020002e-19) + 2.07175494581244e-20) - 2.28548744110883e-20);

    b5 = Presense*pow(fs,2)*(fs*(fs*(-1.82660654997593e-23*fs + 1.84854090977517e-21) - 1.03587747290622e-22) + 3.80914573518139e-23) + fs*(fs*(fs*(fs*(-7.29642109487735e-26*fs + 3.66059678029873e-21) - 3.69708558020002e-19) + 2.07175494581244e-20) - 7.61829147036278e-21);

    a0 = Presense*fs*(fs*(fs*(fs*(7.08698174853978e-24*fs + 5.51043081989487e-21) + 8.03200936429036e-19) + 3.24642080496762e-17) + 2.67679391569996e-17) + fs*(fs*(fs*(fs*(2.92085933931697e-25*fs + 1.48569749297123e-21) + 1.10729406675705e-18) + 1.60771489734926e-16) + 6.49294848694852e-15) + 5.35358783139991e-15;

    a1 = Presense*fs*(fs*(fs*(fs*(-3.54349087426989e-23*fs - 1.65312924596846e-20) - 8.03200936429036e-19) + 3.24642080496762e-17) + 8.03038174709987e-17) + fs*(fs*(fs*(fs*(-1.46042966965848e-24*fs - 4.4570924789137e-21) - 1.10729406675705e-18) + 1.60771489734926e-16) + 1.94788454608456e-14) + 2.67679391569996e-14;

    a2 = Presense*fs*(fs*(fs*(fs*(7.08698174853978e-23*fs + 1.10208616397897e-20) - 1.60640187285807e-18) - 6.49284160993525e-17) + 5.35358783139991e-17) + fs*(fs*(fs*(fs*(2.92085933931697e-24*fs + 2.97139498594247e-21) - 2.2145881335141e-18) - 3.21542979469852e-16) + 1.2985896973897e-14) + 5.35358783139991e-14;

    a3 = Presense*fs*(fs*(fs*(fs*(-7.08698174853978e-23*fs + 1.10208616397897e-20) + 1.60640187285807e-18) - 6.49284160993525e-17) - 5.35358783139991e-17) + fs*(fs*(fs*(fs*(-2.92085933931697e-24*fs + 2.97139498594247e-21) + 2.2145881335141e-18) - 3.21542979469852e-16) - 1.2985896973897e-14) + 5.35358783139991e-14;

    a4 = Presense*fs*(fs*(fs*(fs*(3.54349087426989e-23*fs - 1.65312924596846e-20) + 8.03200936429036e-19) + 3.24642080496762e-17) - 8.03038174709987e-17) + fs*(fs*(fs*(fs*(1.46042966965848e-24*fs - 4.4570924789137e-21) + 1.10729406675705e-18) + 1.60771489734926e-16) - 1.94788454608456e-14) + 2.67679391569996e-14;

    a5 = Presense*fs*(fs*(fs*(fs*(-7.08698174853978e-24*fs + 5.51043081989487e-21) - 8.03200936429036e-19) + 3.24642080496762e-17) - 2.67679391569996e-17) + fs*(fs*(fs*(fs*(-2.92085933931697e-25*fs + 1.48569749297123e-21) - 1.10729406675705e-18) + 1.60771489734926e-16) - 6.49294848694852e-15) + 5.35358783139991e-15;
};

vintageamp_powerampclip = _<: ba.if(fsignbit(_), vintageamp_poweramp_neg_clip, vintageamp_poweramp_clip) :>_ ; 

/*******************************************************************************
  * vintageamp_cab_p1 generated by dkbuiler from VintageAmp_cab_p1.sch
*******************************************************************************/

p5 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0,b4/a0,b5/a0),(a1/a0,a2/a0,a3/a0,a4/a0,a5/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    b0 = pow(fs,2)*(fs*(7.6585048216138e-20*fs + 1.56243596576736e-16) + 7.18921339899639e-14);

    b1 = pow(fs,2)*(fs*(-2.29755144648414e-19*fs - 1.56243596576736e-16) + 7.18921339899639e-14);

    b2 = pow(fs,2)*(fs*(1.53170096432276e-19*fs - 3.12487193153472e-16) - 1.43784267979928e-13);

    b3 = pow(fs,2)*(fs*(1.53170096432276e-19*fs + 3.12487193153472e-16) - 1.43784267979928e-13);

    b4 = pow(fs,2)*(fs*(-2.29755144648414e-19*fs + 1.56243596576736e-16) + 7.18921339899639e-14);

    b5 = pow(fs,2)*(fs*(7.6585048216138e-20*fs - 1.56243596576736e-16) + 7.18921339899639e-14);

    a0 = fs*(fs*(fs*(fs*(2.00646964985932e-24*fs + 8.44743410837729e-20) + 3.62777175873316e-16) + 8.5487775021836e-14) + 2.93631598861595e-11) + 1.04621056823452e-9;

    a1 = fs*(fs*(fs*(fs*(-1.00323482492966e-23*fs - 2.53423023251319e-19) - 3.62777175873316e-16) + 8.5487775021836e-14) + 8.80894796584786e-11) + 5.2310528411726e-9;

    a2 = fs*(fs*(fs*(fs*(2.00646964985932e-23*fs + 1.68948682167546e-19) - 7.25554351746631e-16) - 1.70975550043672e-13) + 5.87263197723191e-11) + 1.04621056823452e-8;

    a3 = fs*(fs*(fs*(fs*(-2.00646964985932e-23*fs + 1.68948682167546e-19) + 7.25554351746631e-16) - 1.70975550043672e-13) - 5.87263197723191e-11) + 1.04621056823452e-8;

    a4 = fs*(fs*(fs*(fs*(1.00323482492966e-23*fs - 2.53423023251319e-19) + 3.62777175873316e-16) + 8.5487775021836e-14) - 8.80894796584786e-11) + 5.2310528411726e-9;

    a5 = fs*(fs*(fs*(fs*(-2.00646964985932e-24*fs + 8.44743410837729e-20) - 3.62777175873316e-16) + 8.5487775021836e-14) - 2.93631598861595e-11) + 1.04621056823452e-9;
};


/*******************************************************************************
  * vintageamp_cab_p2 generated by dkbuiler from VintageAmp_cab_p2.sch
*******************************************************************************/

p6 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0,b4/a0,b5/a0),(a1/a0,a2/a0,a3/a0,a4/a0,a5/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    b0 = 9.41158236356466e-8*fs;

    b1 = 2.8234747090694e-7*fs;

    b2 = 1.88231647271293e-7*fs;

    b3 = -1.88231647271293e-7*fs;

    b4 = -2.8234747090694e-7*fs;

    b5 = -9.41158236356466e-8*fs;

    a0 = fs*(fs*(fs*(fs*(2.03836362863245e-24*fs + 5.84428668665297e-20) + 1.24090160523945e-15) + 1.24244896670604e-11) + 9.41239178961464e-8) + 4.70588529807655e-8;

    a1 = fs*(fs*(fs*(fs*(-1.01918181431623e-23*fs - 1.75328600599589e-19) - 1.24090160523945e-15) + 1.24244896670604e-11) + 2.82371753688439e-7) + 2.35294264903827e-7;

    a2 = fs*(fs*(fs*(fs*(2.03836362863245e-23*fs + 1.16885733733059e-19) - 2.4818032104789e-15) - 2.48489793341209e-11) + 1.88247835792293e-7) + 4.70588529807655e-7;

    a3 = fs*(fs*(fs*(fs*(-2.03836362863245e-23*fs + 1.16885733733059e-19) + 2.4818032104789e-15) - 2.48489793341209e-11) - 1.88247835792293e-7) + 4.70588529807655e-7;

    a4 = fs*(fs*(fs*(fs*(1.01918181431623e-23*fs - 1.75328600599589e-19) + 1.24090160523945e-15) + 1.24244896670604e-11) - 2.82371753688439e-7) + 2.35294264903827e-7;

    a5 = fs*(fs*(fs*(fs*(-2.03836362863245e-24*fs + 5.84428668665297e-20) - 1.24090160523945e-15) + 1.24244896670604e-11) - 9.41239178961464e-8) + 4.70588529807655e-8;
};

b1 = checkbox("Bright[name:Bright");
amp = _<:select2(b1,_,p1 : *(0.333)):> _ : p2 : p3 : *(0.666) : p4 ;
freq_split = fi.filterbank(3, (86.0,210.0,1200.0,6531.0));

finalAmp    = freq_split: ( amp , amp , amp, amp, amp) :>_;

process = ba.bypass_fade(ma.SR/10, checkbox("bypass"), finalAmp);
